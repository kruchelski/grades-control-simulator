{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:3001/grade/';\nconst GRADE_VALIDATION = [{\n  id: 1,\n  gradeType: 'Exercícios',\n  minValue: 0,\n  maxValue: 10\n}, {\n  id: 1,\n  gradeType: 'Trabalho prático',\n  minValue: 0,\n  maxValue: 40\n}, {\n  id: 1,\n  gradeType: 'Desafio',\n  minValue: 0,\n  maxValue: 50\n}];\n\nasync function getAllGrades() {\n  const res = await axios.get(API_URL);\n  const grades = res.data.grades.map(grade => {\n    const {\n      student,\n      subject,\n      type\n    } = grade;\n    return { ...grade,\n      studentLowerCase: student.toLowerCase(),\n      subjectLowerCase: subject.toLowerCase(),\n      typeLowerCase: type.toLowerCase(),\n      isDeleted: false\n    };\n  });\n  let allStudents = new Set();\n  grades.forEach(grade => allStudents.add(grade.student));\n  allStudents = Array.from(allStudents);\n  let allSubjects = new Set();\n  grades.forEach(grade => allSubjects.add(grade.subject));\n  allSubjects = Array.from(allSubjects);\n  let allGradeTypes = new Set();\n  grades.forEach(grade => allGradeTypes.add(grade.type));\n  allGradeTypes = Array.from(allGradeTypes);\n  const allCombinations = [];\n  allStudents.forEach(student => {\n    allSubjects.forEach(subject => {\n      allGradeTypes.forEach(type => {\n        allCombinations.push({\n          student,\n          subject,\n          type\n        });\n      });\n    });\n  });\n  allCombinations.forEach(({\n    student,\n    subject,\n    type\n  }) => {\n    const hasItem = grades.find(grade => {\n      return;\n      grade.subject === subject && grade.student === student && grade.type === type;\n    });\n\n    if (!hasItem) {\n      grades.push({\n        id: grades.length + 1,\n        student,\n        studentLowerCase: student.toLowerCase(),\n        subject,\n        subjectLowerCase: subject.toLowerCase(),\n        type,\n        typeLowerCase: type.toLowerCase(),\n        value: 0,\n        isDeleted: true\n      });\n    }\n\n    ;\n  });\n  return grades;\n}\n\nexport { getAllGrades };","map":{"version":3,"sources":["/Users/cassiano/Documents/Estudos e leituras/Programação/IGTI/mod03/desafio-04/frontend/src/api/apiService.js"],"names":["axios","API_URL","GRADE_VALIDATION","id","gradeType","minValue","maxValue","getAllGrades","res","get","grades","data","map","grade","student","subject","type","studentLowerCase","toLowerCase","subjectLowerCase","typeLowerCase","isDeleted","allStudents","Set","forEach","add","Array","from","allSubjects","allGradeTypes","allCombinations","push","hasItem","find","length","value"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:3001/grade/';\nconst GRADE_VALIDATION = [\n    {\n        id: 1,\n        gradeType: 'Exercícios',\n        minValue: 0,\n        maxValue: 10\n    },\n\n    {\n        id: 1,\n        gradeType: 'Trabalho prático',\n        minValue: 0,\n        maxValue: 40\n    },\n\n    {\n        id: 1,\n        gradeType: 'Desafio',\n        minValue: 0,\n        maxValue: 50\n    }\n];\n\nasync function getAllGrades() {\n    const res = await axios.get(API_URL);\n    const grades = res.data.grades.map(grade => {\n        const { student, subject, type } = grade;\n        return {\n            ...grade,\n            studentLowerCase: student.toLowerCase(),\n            subjectLowerCase: subject.toLowerCase(),\n            typeLowerCase: type.toLowerCase(),\n            isDeleted: false,\n        }\n    })\n\n    let allStudents = new Set();\n    grades.forEach(grade => allStudents.add(grade.student));\n    allStudents = Array.from(allStudents);\n\n    let allSubjects = new Set();\n    grades.forEach(grade => allSubjects.add(grade.subject));\n    allSubjects = Array.from(allSubjects);\n\n    let allGradeTypes = new Set();\n    grades.forEach(grade => allGradeTypes.add(grade.type));\n    allGradeTypes = Array.from(allGradeTypes);\n\n    const allCombinations = [];\n    allStudents.forEach(student => {\n        allSubjects.forEach(subject => {\n            allGradeTypes.forEach(type => {\n                allCombinations.push({\n                    student,\n                    subject,\n                    type\n                });\n            });\n        });\n    });\n\n    allCombinations.forEach(({ student, subject, type }) => {\n        const hasItem = grades.find((grade) => {\n            return\n            grade.subject === subject &&\n            grade.student === student &&\n            grade.type === type;\n        });\n\n        if (!hasItem) {\n            grades.push({\n                id: grades.length + 1,\n                student,\n                studentLowerCase: student.toLowerCase(),\n                subject,\n                subjectLowerCase: subject.toLowerCase(),\n                type,\n                typeLowerCase: type.toLowerCase(),\n                value: 0,\n                isDeleted: true\n            });\n        };\n    })\n    return grades;\n}\n\nexport { getAllGrades }"]},"metadata":{},"sourceType":"module"}